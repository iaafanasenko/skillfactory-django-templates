1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
user_1 = User.objects.create_user(username="Иван")
user_2 = User.objects.create_user(username="Петр")

2. Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(user=user_1)
Author.objects.create(user=user_2)

3. Добавить 4 категории в модель Category
Category.objects.create(name="Спорт")
Category.objects.create(name="Технологии")
Category.objects.create(name="Политика")
Category.objects.create(name="Культура")
Category.objects.create(name="Наука")
Category.objects.create(name="Экономика")

4. Добавить 2 статьи и 1 новость.
Post.objects.create(author=Author.objects.get(pk=1), category_type='A', title='Article 1', text='Article Text 1')
Post.objects.create(author=Author.objects.get(pk=2), category_type='A', title='Article 2', text='Article Text 2')
Post.objects.create(author=Author.objects.get(pk=1), category_type='N', title='News 1', text='News Text 1')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
PostCategory.objects.create(post=Post.objects.get(pk=1), category=Category.objects.get(name='Спорт'))
PostCategory.objects.create(post=Post.objects.get(pk=1), category=Category.objects.get(name='Технологии'))
PostCategory.objects.create(post=Post.objects.get(pk=1), category=Category.objects.get(name='Наука'))
PostCategory.objects.create(post=Post.objects.get(pk=2), category=Category.objects.get(name='Культура'))
PostCategory.objects.create(post=Post.objects.get(pk=3),category=Category.objects.get(name='Экономика'))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Comment.objects.create(post_id=Post.objects.get(id=1).id, user_id=Author.objects.get(id=1).user_id, text = 'Текст комментария')
Comment.objects.create(post_id=Post.objects.get(id=2).id, user_id=User.objects.get(id=1).id, text = 'Текст комментария')
Comment.objects.create(post_id=Post.objects.get(id=3).id, user_id=User.objects.get(id=1).id, text = 'Текст комментария')
Comment.objects.create(post_id=Post.objects.get(id=3).id, user_id=Author.objects.get(id=1).user_id, text = 'Текст комментария')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Comment.objects.get(id=1).like()

Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).dislike()
Comment.objects.get(id=2).dislike()

Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).dislike()

Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()

8. Обновить рейтинги пользователей.
Author.objects.get(id=1).update_rating()
Author.objects.get(id=2).update_rating()

9. Вывести, username и рейтинг лучшего пользователя,применяя сортировку и возвращая поля первого объекта.
a = Author.objects.order_by('-rating')[:1]
for i in a:
    i.user.username
    i.rating

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
Post.objects.order_by('-rating').values('created_at','author__user__username','rating','text','title')[0]

Preview:

p1 = Post.objects.order_by('-rating')[0]
p1.preview()

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
top_post = Post.objects.order_by('-rating')[0]
top_post.comment_set.all().values('created_at', 'user_id__username', 'rating', 'text')
